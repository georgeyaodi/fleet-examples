{{- $kubectl := "kubectl" -}}
{{- if ne .Release.Namespace "default" -}}
{{- $kubectl = printf "%s --namespace %s" $kubectl .Release.Namespace -}}
{{- end -}}

{{- $controllerNodes := include "nodeCount" (dict "nodeType" "controller" "context" $) }}
{{- $brokerNodes := include "nodeCount" (dict "nodeType" "broker" "context" $) }}
{{- $clientPort := int .Values.containerPorts.client }}
{{- $topicName := include "fullName" (dict "suffix" "topic" "context" $) }}
{{- $topicName := include "fullName" (dict "suffix" "topic" "context" $) }}
{{- $nodeType := "controller" }}
{{- if (eq (include "templateToBoolean" (dict "template" .Values.cluster.controllerBrokerRole "context" $)) "false") }}
{{- $nodeType = "broker" }}
{{- end }}
{{- $serviceName := include "renderServiceName" (dict "nodeType" $nodeType "context" $) }}
{{- $bootstrapServer := printf "%s.%s.svc.%s:%d" $serviceName .Release.Namespace .Values.clusterDomain $clientPort }}

This chart installs a {{ add $controllerNodes $brokerNodes }} nodes Kafka Cluster composed of:
  - {{ $controllerNodes }} nodes working as {{- ternary " brokers and controllers" " controllers" .Values.cluster.controllerBrokerRole }}
{{- if and (include "areStandaloneBrokersEnabled" $) (gt (int $brokerNodes) 0) }}
  - {{ $brokerNodes }} working as brokers
{{- end }}

Instructions to connect from a client pod to a non-secure Kafka deployment:

1. Deploy a kafka client pod with configuration:

    apiVersion: v1
    kind: Pod
    metadata:
      name: kafka-client
      namespace: {{ .Release.Namespace | quote }}
    spec:
      containers:
      - name: kafka-client
        image: {{ .Values.images.controller.registry }}/{{ .Values.images.controller.repository }}:{{ .Values.images.controller.tag }}
        command:
          - sleep
          - infinity

2. Log into the Pod

  {{ $kubectl }} exec -it kafka-client -- /bin/bash

3. Explore with kafka commands:

  # Delete the topic if it exists
  kafka-topics.sh --bootstrap-server {{ $bootstrapServer }} --topic {{ $topicName }} --delete --if-exists

  # Create the topic
  kafka-topics.sh --bootstrap-server {{ $bootstrapServer }} --topic {{ $topicName }} --create --partitions {{ default 1 .Values.cluster.numPartitions }} --replication-factor {{ default 1 .Values.cluster.offsetsTopicReplicationFactor }} --if-not-exists

  # Create a message
  export MESSAGE="`date -u`"

  # Produce a test message to the topic
  echo "$MESSAGE" | kafka-console-producer.sh --bootstrap-server {{ $bootstrapServer }} --topic {{ $topicName }}

  # Consume a test message from the topic
  kafka-console-consumer.sh --bootstrap-server {{ $bootstrapServer }} --topic {{ $topicName }} --from-beginning | grep "$MESSAGE"
